@page "/fetchdata"

@using BlazorExam.Data
@using Newtonsoft.Json
@inject WeatherForecastService ForecastService



<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @* @foreach (var item in dataObj)
            {
                <tr>
                    <td>@item.userId</td>
                    <td>@item.id</td>
                    <td>@item.title</td>
                    <td>@item.completed</td>
           
                </tr>
            } *@
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;



    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
ForecastService.HelloWorld();
@* 
   //Define your base url
      string baseURL = $"https://jsonplaceholder.typicode.com/todos";
      //Have your api call in try/catch block.
 
        //Now we will have our using directives which would have a HttpClient 
        using (HttpClient client = new HttpClient())
        {
          //Now get your response from the client from get request to baseurl.
          //Use the await keyword since the get request is asynchronous, and want it run before next asychronous operation.
          using (HttpResponseMessage res = await client.GetAsync(baseURL))
          {
            //Now we will retrieve content from our response, which would be HttpContent, retrieve from the response Content property.
            using (HttpContent content = res.Content)
            {
              //Retrieve the data from the content of the response, have the await keyword since it is asynchronous.
              string data = await content.ReadAsStringAsync();
              //If the data is not null, parse the data to a C# object, then create a new instance of PokeItem.
              if (data != null)
              {
                //Parse your data into a object.               


var list = JsonConvert.DeserializeObject<List<Todos>>(data);

    

                //Then create a new instance of PokeItem, and string interpolate your name property to your JSON object.
                //Which will convert it to a string, since each property value is a instance of JToken.
                // PokeItem pokeItem = new PokeItem(name: $"{dataObj["name"]}");
                //Log your pokeItem's name to the Console.
                Console.WriteLine(list);
              }
              else
              {
                //If data is null log it into console.
                Console.WriteLine("Data is null!");
              }
            }
          }
        } *@


    }
}
