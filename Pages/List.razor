@page "/list"

@using BlazorExam.Data
@using Newtonsoft.Json

@inject IJSRuntime JsRuntime


<h1>Saved Items</h1>

<div class="d-flex flex-row">
@foreach (var Item in MyApiUrls)
{
  <div class="mr-4">
    <input type="radio" name="technology" id="@Item.name" value="@Item.name"  @oninput="@ChangeSource" />
    <label class="pointer" for="@Item.name">@Item.name</label>
  </div>
}
</div>

@if (Type != null)
{
  @if (ApiData.Count > 0) {

    <ListTable Data="@ApiData" DoAction="@DeleteItemHandler"/>

  } else {
    <div class="jumbotron jumbotron-fluid">
      <div class="container">
        <h1 class="display-4">No items for this source saved in LocalStorage</h1>
      </div>
    </div>
  }


} else {

  <div class="jumbotron jumbotron-fluid">
    <div class="container">
      <h1 class="display-4">Please Select Source</h1>
      <p class="lead">You will then see the list of items saved by source.</p>
    </div>
  </div>

}


@code {

  private string Type;

  private List<Dictionary<string, string>> ApiData = new List<Dictionary<string, string>>();

  private List<ApiUrls> MyApiUrls = ApiService.MyApiUrls;

    
  private async Task DeleteItemHandler(Dictionary<string, string> Item)
  {

    try
    {
      await JsRuntime.InvokeVoidAsync("DeleteSavedItem", Type, Int32.Parse(Item["id"]));
      await FetchSavedData();
    }
    catch (Exception Exception)
    {
      Console.WriteLine("Exception Hit: {0}", Exception);
    }
  }
  
  private async Task ChangeSource(ChangeEventArgs Args)
  {
    Type = Args.Value.ToString();
    await FetchSavedData();
  }

  private async Task FetchSavedData() 
  {

    try
    {
      var Response = await JsRuntime.InvokeAsync<string>("FetchSavedItems", Type);


      ApiData = JsonConvert.DeserializeObject<List<Dictionary<string, string>>>(Response);
      
      StateHasChanged();

    }
    catch (Exception Exception)
    {
      Console.WriteLine("Exception Hit: {0}", Exception);
    }
      
  } 

}
