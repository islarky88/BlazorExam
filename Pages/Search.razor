@page "/search"

@using BlazorExam.Data
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components.Web

@inject IJSRuntime JsRuntime

<div class="row">
  <div class="col-12 col-sm-6 d-flex flex-column">
    <h4>Step 1. Choose Source</h4>
    @foreach (var Item in MyApiUrls)
    {
    <div class="mr-4">
      <input type="radio" name="technology" id="@Item.name" value="@Item.url"  @oninput="@RadioSelection" />
      <label class="pointer" for="@Item.name">@Item.name</label>
    </div>
    }
  </div>
  <div class="col-12 col-sm-6">
    <h4>Step 2. Type Query</h4>
    <TextField Placeholder="@PlaceholderText" OnTextInput="TextInputHandler" />
  </div>
</div>

@if (RadioValue != null) {
<div class="mb-3">
  Current URL for fetching: <span class="text-bold">@RadioValue</span>
</div>
}

@if (Loading == true) {

<div class="container text-center mt-5">
  <div class="spinner-border spinner-border-lg" style="width: 100px; height: 100px;" role="status">
    <span class="sr-only">Loading...</span>
  </div>
</div>

} else if (ApiData.Count > 0) {
<table class="table">
  <thead>
    <tr>
    @foreach(var Item in ApiData.First().Keys)
    {
      <th>@Item</th>
    }
    </tr>
  </thead>
  <tbody>
    @foreach (var Item in ApiData)
    {
      <tr class="pointer" @onclick="@(e => SaveItem(Item))">

        @foreach(var Val in Item.Values)
        {
          <td>@Val</td>
        }
      </tr>
    }
  </tbody>
</table>
}

@code {

  private string RadioValue;

  private bool Loading = false;

  private string PlaceholderText = "Search query...";
  
  List<Dictionary<string, string>> ApiData = new List<Dictionary<string, string>>();

  List<ApiUrls> MyApiUrls = ApiService.MyApiUrls;

  private async Task SaveItem(Dictionary<string, string> Item)
  {
    try
    {
      var UrlName = MyApiUrls.First(Item => Item.url == RadioValue).name;
      await JsRuntime.InvokeVoidAsync("SaveToLocalStorage", UrlName, Item);
    }
      catch (Exception exception)
    {
      Console.WriteLine("Exception Hit------------");
      Console.WriteLine(exception);
    }


  }

  private void RadioSelection(ChangeEventArgs Args)
  {
    RadioValue = Args.Value.ToString();
  }

  private async Task TextInputHandler(string newMessage)
  {
    try
    {

      Loading = true;

      await Task.Run(()=> FetchData());  //<--here!

      Loading = false;
      
      StateHasChanged();

    }
      catch (Exception exception)
    {
      Console.WriteLine("Exception Hit------------");
      Console.WriteLine(exception);
    }


  }

  private async Task FetchData()
  {
    try
    {
      if (RadioValue == null) return;

      var Response = await ApiService.GetDataFromUrl(RadioValue);
      @* ApiData = JsonConvert.DeserializeObject<List<JsonData>>(response); *@
      ApiData = JsonConvert.DeserializeObject<List<Dictionary<string, string>>>(Response);

    }
      catch (Exception exception)
    {
      Console.WriteLine("Exception Hit------------");
      Console.WriteLine(exception);
    }


  }
}    