@page "/search"

@using BlazorExam.Data
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components
@using System.Timers;

@inject IJSRuntime JsRuntime

<div class="row">
  <div class="col-12 col-sm-4 d-flex flex-column">
    <h4>Step 1. Choose Source</h4>
    @foreach (var Item in MyApiUrls)
    {
    <div class="mr-4">
      <input type="radio" name="technology" id="@Item.name" value="@Item.url"  @oninput="@RadioSelection" />
      <label class="pointer" for="@Item.name">@Item.name</label>
    </div>
    }
  </div>
  <div class="col-12 col-sm-8">
    <h4>Step 2. Type Query</h4>
    <div style="position: relative;">
      <SearchField Placeholder="@PlaceholderText" OnSearchClick="@SearchHandler" OnTextInput="@TextInputHandler" IsDisabled="@IsDisabled" @ref="search"/>

      @if (ShowSuggestions == true) {
        <div class="list-group" style="position: absolute; top: 37px; width: 300px;">
          @foreach (var Item in Suggestions.Take(10))
          {
          // filters the items if matches with title or body
              @if (Item.ContainsKey("title"))
              {
                <div class="list-group-item list-group-item-action pointer" @onclick="@(e => SetTextInput(Item["title"]))">@Item["title"]</div>
              } 
              else if (Item.ContainsKey("body")) 
              {
                <div class="list-group-item list-group-item-action pointer" @onclick="@(e => SetTextInput(Item["body"]))">@Item["title"]</div>
              }

          }
        </div>
      }
    </div>

  </div>
</div>

@if (RadioValue != null) {
<div class="mb-3">
  Current URL for fetching: <span class="text-bold">@RadioValue</span>
</div>
}

@if (Loading == true) {

<div class="container text-center mt-5">
  <div class="spinner-border spinner-border-lg" style="width: 100px; height: 100px;" role="status">
    <span class="sr-only">Loading...</span>
  </div>
</div>

} else if (ApiData.Count > 0) {

  <ListTable Data="@ApiData" DoAction="@SaveItemHandler"/>

}

@code {

  private SearchField search;

  private string RadioValue;

  private bool Loading = false;

  private bool IsDisabled = true;

  private bool ShowSuggestions = false;

  private string PlaceholderText = "Search query...";

  private Timer inputTimer;

  private string InputText;

  private List<Dictionary<string, string>> Suggestions = new List<Dictionary<string, string>>();
  
  private List<Dictionary<string, string>> ApiData = new List<Dictionary<string, string>>();

  private List<ApiUrls> MyApiUrls = ApiService.MyApiUrls;

  private async Task SaveItemHandler(Dictionary<string, string> Item)
  {
    try
    {
      var UrlName = MyApiUrls.First(UrlItem => UrlItem.url == RadioValue).name;
      await JsRuntime.InvokeVoidAsync("SaveToLocalStorage", UrlName, Item);
    }
      catch (Exception Exception)
    {
      Console.WriteLine("Exception Hit: {0}", Exception);
    }


  }

  
  private void RadioSelection(ChangeEventArgs Args)
  {
    RadioValue = Args.Value.ToString();
    IsDisabled = false;
  }

  private void SetTextInput(string Input)
  {
    InputText = Input;
    ShowSuggestions = false;
    search.ChangeInput(Input);
    StateHasChanged();

  }

  private void TextInputHandler(string newMessage)
  {
    try
    {
      InputText = newMessage;

      // remove previous one
      inputTimer.Stop();

      // new timer
      inputTimer.Start();  
        

    }
      catch (Exception Exception)
    {
      Console.WriteLine("Exception Hit: {0}", Exception);
    }


  }

  private async Task SearchHandler(string newMessage)
  {
    try
    {

      ShowSuggestions = false;
      
      Console.WriteLine("SearchHandler: {0}", newMessage);
      Loading = true;

      await Task.Run(()=> FetchData());  //<--here!

      Loading = false;
      
      StateHasChanged();

    }
      catch (Exception Exception)
    {
      Console.WriteLine("Exception Hit: {0}", Exception);
    }


  }

  private async Task FetchData()
  {
    try
    {
      if (RadioValue == null) return;

      var Response = await ApiService.GetDataFromUrl(RadioValue);
      @* ApiData = JsonConvert.DeserializeObject<List<JsonData>>(response); *@
      ApiData = JsonConvert.DeserializeObject<List<Dictionary<string, string>>>(Response);

      List<Dictionary<string, string>> Filtered = new List<Dictionary<string, string>>();

      foreach (Dictionary<string, string> Item in ApiData)
      {

          // filters the items if matches with title or body
          if (Item.ContainsKey("title") && Item["title"].Contains(InputText))
          {
            Filtered.Add(Item);
          } 
          else if (Item.ContainsKey("body") && Item["body"].Contains(InputText)) 
          {
            Filtered.Add(Item);
          }

      }

      ApiData = Filtered;


    }
      catch (Exception Exception)
    {
      Console.WriteLine("Exception Hit: {0}", Exception);
    }


  }

  private async Task ShowSuggestionsPopup()
  {
    try
    {
      if (RadioValue == null) return;

      var Response = await ApiService.GetDataFromUrl(RadioValue);

      Suggestions = JsonConvert.DeserializeObject<List<Dictionary<string, string>>>(Response);

      List<Dictionary<string, string>> Filtered = new List<Dictionary<string, string>>();

      foreach (Dictionary<string, string> Item in Suggestions)
      {

          // filters the items if matches with title or body
          if (Item.ContainsKey("title") && Item["title"].Contains(InputText))
          {
            Filtered.Add(Item);
          } 
          else if (Item.ContainsKey("body") && Item["body"].Contains(InputText)) 
          {
            Filtered.Add(Item);
          }

      }

      Suggestions = Filtered;
      
      ShowSuggestions = true;
      StateHasChanged();

    }
      catch (Exception Exception)
    {
      Console.WriteLine("Exception Hit: {0}", Exception);
    }


  }

  private void OnUserFinish(Object source, ElapsedEventArgs e)
  {
    InvokeAsync(async () =>
    {
      await ShowSuggestionsPopup();
      Console.WriteLine("Show Suggestions for: {0}", InputText);
    });
    
  }

  protected override void OnInitialized()
  {
    // 500 ms on input
    inputTimer = new System.Timers.Timer(500);
    inputTimer.Elapsed += OnUserFinish;
    inputTimer.AutoReset = false;
  }

}    