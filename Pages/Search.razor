@page "/search"

@using BlazorExam.Data
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components.Web

@inject IJSRuntime JsRuntime


<h1>Search</h1>


<div class="row">
  <div class="col-12 col-sm-6">
    <TextField Placeholder="@PlaceholderText" OnTextInput="TextInputHandler" />
  </div>
  <div class="col-12 col-sm-6 d-flex flex-column">
    @foreach (var Item in MyApiUrls)
    {
    <div class="mr-4">
      <input type="radio" name="technology" id="@Item.name" value="@Item.url"  @oninput="@RadioSelection" />
      <label for="@Item.name">@Item.name</label>
    </div>
    }
  </div>
</div>

@if (RadioValue != null) {
<div class="mb-3">
  Current URL for fetching: <span class="text-bold">@RadioValue</span>
</div>
}

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var Item in Data)
            {
                <tr class="pointer" @onclick="@(e => SaveItem(Item))">
                    <td>@Item.Id</td>
                    <td>@Item.Title</td>
                </tr>
            }
        </tbody>
    </table>
@code {

  List<JsonData> Data = new List<JsonData>();
  private string RadioValue;

  private string PlaceholderText = "Search query...";

  

  List<ApiUrls> MyApiUrls = new List<ApiUrls>
  {
    new ApiUrls{name = "Albums", url = "https://jsonplaceholder.typicode.com/albums"},
    new ApiUrls{name = "Todos", url = "https://jsonplaceholder.typicode.com/todos"},
    new ApiUrls{name = "Posts", url = "https://jsonplaceholder.typicode.com/posts"},
  };


  private async Task SaveItem(JsonData Item)
  {

    var UrlName = MyApiUrls.First(Item => Item.url == RadioValue).name;
    await JsRuntime.InvokeVoidAsync("SaveToLocalStorage", UrlName, Item);

  }

  private async Task RadioSelection(ChangeEventArgs Args)
  {

    RadioValue = Args.Value.ToString();

    await FetchData();

  }

  private async Task TextInputHandler(string newMessage)
  {

    await FetchData();

  }

  private async Task FetchData()
  {

    if (RadioValue == null) return;

    var response = await ApiService.GetDataFromUrl(RadioValue);
    Data = JsonConvert.DeserializeObject<List<JsonData>>(response);
    StateHasChanged();

  }
}    