@using System.Timers;




<div>
  <div class="d-flex">
    <div class="form-group">
      <input id="search" class="form-control" placeholder="@Placeholder" disabled="@IsDisabled" type="text" @bind-value="TextInput" @bind-value:event="oninput" @onkeyup="@HandleKeyUp">
    </div>
    <div>
      <button class="btn btn-primary ml-2" @onclick="EmitSearch" disabled="@SearchDisabled">Search</button>
    </div>
  </div>
  <div>Input: @TextInput</div>
</div>


@code {

  [Parameter] public EventCallback<string> OnTextInput { get; set; }
  [Parameter] public EventCallback<string> OnSearchClick { get; set; }
  [Parameter] public string Placeholder { get; set; }
  [Parameter] public bool IsDisabled { get; set; }

  private Timer inputTimer;

  private bool SearchDisabled = true; 

  private string TextInput = "";

  private void EmitSearch()
  {
    OnSearchClick.InvokeAsync(TextInput);
  }

  private void ChangeTest()
  {
    OnTextInput.InvokeAsync(TextInput);
    Console.WriteLine(TextInput);
  }

  
  void HandleKeyUp(KeyboardEventArgs e)
  {

    if (TextInput.Length > 0) {
      SearchDisabled = false;
    } else {
      SearchDisabled = true;
    }

    // remove previous one
    inputTimer.Stop();

    // new timer
    inputTimer.Start();        
  }    

  private void OnUserFinish(Object source, ElapsedEventArgs e)
  {
    InvokeAsync( () =>
      {
        Console.WriteLine(TextInput);
        ChangeTest();
      });
    
  }

  protected override void OnInitialized()
  {
    inputTimer = new System.Timers.Timer(1000);
    inputTimer.Elapsed += OnUserFinish;
    inputTimer.AutoReset = false;
  }

}
